{"version":3,"sources":["../src/router.js"],"names":["router","controllersFolder","Array","isArray","Promise","resolve","forEach","err","files","filter","file","extname","controller","require","default","handlers","handler","method","requestKeys","Object","keys","ALL","key","toLowerCase","path","callback"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;kBAGe,OAAMA,MAAN,EAAcC,iBAAd,KAAoC;AAC/CA,wBAAoBC,MAAMC,OAAN,CAAcF,iBAAd,IAAmCA,iBAAnC,GAAsD,CAACA,iBAAD,CAA1E;AACA,WAAO,IAAIG,OAAJ,CAAaC,OAAD,IAAa;AAC5BJ,0BAAkBK,OAAlB,CAA0BL,qBAAqB;AAC3C,4CAAUA,iBAAV,EAA6B,CAACM,GAAD,EAAMC,KAAN,KAAgB;AACzCA,wBAAQA,MAAMC,MAAN,CAAcC,IAAD,IAAU,eAAKC,OAAL,CAAaD,IAAb,MAAuB,KAA9C,CAAR;;AAEAF,sBAAMF,OAAN,CAAcI,QAAQ;AAClB,0BAAME,aAAaC,QAAQH,IAAR,EAAcI,OAAjC;AACA,wBAAI,EAAEF,0CAAF,CAAJ,EAAyC;AACrC;AACH;;AAEDA,+BAAWG,QAAX,CAAoBT,OAApB,CAA4BU,WAAW;AACnC,8BAAMC,SAASD,QAAQC,MAAvB;AACA,4BAAIC,cAAcC,OAAOC,IAAP,sBAAlB;AACA,4BAAIH,WAAW,qBAAcI,GAA7B,EAAkC;AAC9BH,0CAAcA,YAAYT,MAAZ,CAAmBa,OAAO,qBAAcA,GAAd,MAAuB,qBAAcD,GAA/D,CAAd;AACH;AACDH,oCAAYZ,OAAZ,CAAoBgB,OAAO;AACvB,gCAAIL,WAAW,qBAAcK,GAAd,CAAX,IAAiCL,WAAW,qBAAcI,GAA9D,EAAmE;AAC/DrB,uCAAOsB,IAAIC,WAAJ,EAAP,EAA0BP,QAAQQ,IAAR,CAAa,CAAb,CAA1B,EAA2CR,QAAQS,QAAnD;AACH;AACJ,yBAJD;AAKH,qBAXD;AAYApB;AACH,iBAnBD;AAoBH,aAvBD;AAwBH,SAzBD;AA0BH,KA3BM,CAAP;AA4BH,C","file":"router.js","sourcesContent":["import recursive from \"recursive-readdir\";\nimport Controller from \"./decorators/wrappers/Controller\";\nimport path from \"path\";\nimport {RequestMethod} from \"./decorators/index\";\n\n\nexport default async(router, controllersFolder) => {\n    controllersFolder = Array.isArray(controllersFolder) ? controllersFolder: [controllersFolder];\n    return new Promise((resolve) => {\n        controllersFolder.forEach(controllersFolder => {\n            recursive(controllersFolder, (err, files) => {\n                files = files.filter((file) => path.extname(file) === \".js\");\n\n                files.forEach(file => {\n                    const controller = require(file).default;\n                    if (!(controller instanceof Controller)) {\n                        return;\n                    }\n\n                    controller.handlers.forEach(handler => {\n                        const method = handler.method;\n                        let requestKeys = Object.keys(RequestMethod);\n                        if (method === RequestMethod.ALL) {\n                            requestKeys = requestKeys.filter(key => RequestMethod[key] !== RequestMethod.ALL);\n                        }\n                        requestKeys.forEach(key => {\n                            if (method === RequestMethod[key] || method === RequestMethod.ALL) {\n                                router[key.toLowerCase()](handler.path[0], handler.callback)\n                            }\n                        });\n                    });\n                    resolve();\n                });\n            });\n        });\n    });\n};"]}